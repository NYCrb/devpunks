#!/usr/bin/env bash

declare INPUT=$1
declare OUTPUT=$2

# Video Conversion for Cross Device with FFmpeg
# https://gist.github.com/jaydenseric/220c785d6289bcfd7366

# Video encoding guide
# https://trac.ffmpeg.org/wiki/Encode/H.264

# Scaling https://trac.ffmpeg.org/wiki/Scaling
# ffmpeg \
#
# SEEKING https://trac.ffmpeg.org/wiki/Seeking
# *** SEEK BEFORE INPUT for cover image ***
#   -ss [start]     \ seek start time offset
#   -t [duration]   \ seek duration time (precedence over -to)
#   -to [end]       \ seek end time
#
#   -vsync 1        \ # Video sync https://www.cleancss.com/explain-command/ffmpeg/6658
#   -copyts         \ # Copy timestamp
#   -copytb         \ # Copy time base
#
# read PNG images with filename img001, img002, img003, etc..
# img can be changed to another prefix
# %03d can be changed to %04d for 0001, %05d for 00001 formats, etc...
# -i img%03d.png    \
#   -threads 4      \ # thread count
#   -stats          \
#   -report         \
#   -vn             \ # Disable video
#   -an             \ # Disable audio
#   -vol 256        \ # Audio volume level (0-256)
#   -pre preset     \
#   -i input.avi    \
#
# FILTERS https://ffmpeg.org/ffmpeg-filters.html#Filtergraph-description
#   -filter_threads 4 \
#   -filter_complex_threads 4 \
#   -vf             \  # Video filter
#     scale=1920:1080 \ # Scale (use n:-2 to keep aspect ratio)
#    ,setdar=16:9    \ # Another way to set video resolution
#   -af audio filter \ # Audio filter
#   -filter [filter] \ # Main filter
#
# FORMAT
#   -f format       \ # force format (image2, )
#   -vbr 2          \ # Variable bit rate
#   -crf 23         \ # crf (constant rate factor) quality (51 worst, 0 lossless, 18-28 is sane, default 23)
#   -movflags +faststart \ # https://trac.ffmpeg.org/wiki/Encode/AAC#ProgressiveDownload
#   -b:a 128K       \ # audio bitrate (-ab)
#   -b:v 1M         \ # video bitrate (-b)
#   -minrate 1M     \
#   -maxrate 1M     \
#   -bufsize 2M     \
#   -framerate 24   \ # ** USED FOR IMAGES **
#   -frames:v 1     \ # (-vframes) ** USED FOR IMAGES **
#   -r 24           \ # FPS (Frames Per Second)
#   -ar 44100       \ # Audio sample rate
#   -aspect 16:9    \ # Aspect Ratio (4:3, 16:9, 1.3333)
#   -pix_fmt yuv420p\ # Quicktime Pixel format https://trac.ffmpeg.org/wiki/Encode/H.264#Encodingfordumbplayers
#
# CODECS
#   -c:a aac        \ # codec (shorthand) (e.g. copy, etc.)
#   -c:v libx264    \ # codec (shorthand) (e.g. copy, etc.)
#   -acodec aac     \ # codec (longform)  (e.g. copy, etc.)
#   -vcodec libx264 \ # codec (longform)  (e.g. copy, etc.)
#
# output.avi

### 2-PASS
# https://slhck.info/video/2017/03/01/rate-control.html#2-pass-average-bitrate-2-pass-abr
# ffmpeg -i <input> -c:v libx264 -b:v 1M -pass 1 -f mp4 /dev/null
# ffmpeg -i <input> -c:v libx264 -b:v 1M -pass 2 <output>.mp4

###################################################################################
###################################################################################

# Generates a cover image along with mute web-ready WebM and MP4 files for each master video in a folder.
# See: https://gist.github.com/jaydenseric/220c785d6289bcfd7366.

# Parameter 1: Input video format (e.g. "mov").
# Parameter 2: Output width in pixels (e.g. "1280").
# Example use: "./video4web.sh mov 1280".

for i in *.$1
  do

    echo $i

# Generate MP4
#   ffmpeg -i "$i" -c:v libx264 -pix_fmt yuv420p -profile:v baseline -level 3.0 -crf 22 -preset veryslow -vf scale=$2:-2 -an -movflags +faststart -threads 0 ${i%$1}mp4
  done
