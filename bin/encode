#!/usr/bin/env bash

# Video Conversion for Cross Device with FFmpeg
# https://gist.github.com/jaydenseric/220c785d6289bcfd7366
#
#Social Media Video encodings
# - https://trac.ffmpeg.org/wiki/Encode/YouTube

# FFMPEG and How to Use It Wrong - https://videoblerg.wordpress.com/2017/11/10/ffmpeg-and-how-to-use-it-wrong/

#ARCH Linux FFMPEG Man(ual) - https://wiki.archlinux.org/index.php/FFmpeg

# Best Youtube settings
# - https://support.google.com/youtube/answer/1722171?hl=en
# - https://superuser.com/questions/866798/what-ffmpeg-command-line-matches-the-one-youtube-uses

# RATE CONTROL - https://slhck.info/video/2017/03/01/rate-control.html
# To summarize, here’s what you should do, depending on your use case:

# - Archival — CRF that gives you the quality you want.
# - Streaming — Two-pass CRF or ABR with VBV-constained bitrate.
# - Live Streaming — One-pass CRF or ABR with VBV-constained bitrate, or CBR if you can waste bits.
# - Encoding for Devices — Two-pass ABR, typically.

# Video encoding guide
# https://trac.ffmpeg.org/wiki/Encode/H.264

# FFMPEG MAPPING FLAGS
# https://sites.google.com/site/linuxencoding/x264-ffmpeg-mapping

# Send output stream to dev/null
# https://stackoverflow.com/questions/20323640/ffmpeg-deocde-without-producing-output-file#answer-20325676

declare -rx INPUT="-i $1"
declare -rx OUTPUT=${2:-dev/null}

# SEEKING https://trac.ffmpeg.org/wiki/Seeking
# *** SEEK BEFORE INPUT for cover image ***
declare -r START="-ss 00:00:00" # seek start time offset
declare -r DURATION="-t 240"   # seek duration time (precedence over -to)
declare -r END= #"-to [end]"       # seek end time
declare -r SEEK="$START $DURATION $END"

declare -r  CORES=4
declare -r  MAPS="-map 0"
declare -r  STATS="-stats"
declare -r  REPORT="-report"
declare -r  FFMPEG=$(which ffmpeg)
declare -r  THREADS="-threads $CORES -filter_threads $CORES -filter_complex_threads $CORES"
declare -r  FORMAT=$( ( test ! "$2" && echo -f null ) || echo -f mp4 ) # image2 for still frames
declare -r  STAMP="-copyts"
# declare -r BASE="-copytb -1"

# CODECS
declare -r  TUNE="-tune film"                           # Possible tunes: film animation grain stillimage psnr ssim fastdecode zerolatency
declare -r  PRESET="-preset veryfast $TUNE"             # fast, veryfast, ultrafast, slow, veryslow
declare -r  AUDIO_CODEC="-ac 2 -c:a aac"                # Fraunhofer is best but need to compile `-c:a libfdk_aac`
declare -r  VIDEO_CODEC="-c:v libx264 -x264opts no-scenecut -coder 0" # (YouTube: By default CABAC is the entropy encoder used by x264.)
declare -r  CODECS="$PRESET $AUDIO_CODEC $VIDEO_CODEC"
declare -r  SYNC="-vsync vfr"                           #Video sync https://www.cleancss.com/explain-command/ffmpeg/6658
                                                        # 0 (passthrough), 1 (cfr), 2 (vfr), drop, auto
                                                        # (-async for audio)

# Keyframe interval (or GOP length). -g 15 varies on YouTube's FPS.(The default, 12, works for 24-25 fps. For NTSC and 30 fps, select 15.* FFMPEG option: -g, Not sure what youtube's default FPS is if it is 24 or 30. I assume 24 since the default 12 (or 15) would be half the frame rate
declare -r  KEYFRAMES="-g 24 -keyint_min 12"
# SAMPLE RATE &  FPS (Frame Rate Per Second) (Assume YouTube's default frame rate is 24FPS 48000Hz)
# 24000/1001 (23.976fps). 30000/1001 (29.970fps). 60000/1001 (59.94fps)
# PLACE BEFORE OUTPUT TO FORCE
# http://www.reduser.net/forum/showthread.php?102725-24P-or-23-976P-That-is-the-question
declare -r  FREQUENCY="$KEYFRAMES -r 24000/1001 -ar 48000"
declare -r  PROFILE="-profile:v baseline -level:v 3.0" # baseline, main, high
# declare -r  BITRATE="-b:a 128K -b:v 5M -bufsize 10M -minrate 1M -maxrate 5M -crf 18"
declare -r  BITRATE="-b:a 128K -crf 24"
                                                       # crf Guide - https://slhck.info/video/2017/02/24/crf-guide.html
                                                       # Rate Control modes - https://slhck.info/video/2017/03/01/rate-control.html
                                                       # crf (constant rate factor) quality (51 worst, 0 lossless, 18-28 is sane, default 23)
declare -r  PIXELS="-pix_fmt yuv420p"                  # Chroma subsampling: 4:2:0 Quicktime Pixel format https://trac.ffmpeg.org/wiki/Encode/H.264#Encodingfordumbplayers
declare -r  QUICKTIME="-movflags +faststart $PIXELS"   # https://trac.ffmpeg.org/wiki/Encode/AAC#ProgressiveDownload

# SCALE https://trac.ffmpeg.org/wiki/Scaling
#  - https://ffmpeg.org/ffmpeg-scaler.html
#  - http://nickyguides.digital-digest.com/bilinear-vs-bicubic.htm
declare -r  WIDTH=1920
declare -r  HEIGHT=1080
printf  -v  ASPECT "%.3f" "$((WIDTH/HEIGHT))" # Aspect Ratio (4:3, 16:9, 1.3333) (DEPRECATED?)
declare -r  COEFFICIENT="min($WIDTH/(iw*sar)\,$HEIGHT/(ih*sar))" # Use SAR for anamorphic video
declare -r  RESOLUTION="max($WIDTH\,trunc($COEFFICIENT*(iw*sar)/2)*2):max($HEIGHT\,trunc($COEFFICIENT*(ih*sar)/2)*2)"
# LETTERBOXING
# https://stackoverflow.com/questions/8133242/ffmpeg-resize-down-larger-video-to-fit-desired-size-and-add-padding
# https://superuser.com/questions/547296/resizing-videos-with-ffmpeg-avconv-to-fit-into-static-sized-player/1136305#1136305
declare -r  LETTERBOX="pad=$WIDTH:$HEIGHT:($WIDTH-($COEFFICIENT*(iw*sar)))/2:($HEIGHT-($COEFFICIENT*(ih*sar)))/2:color=green"
declare -r  ALGORITHM="flags=+bilinear" # https://i.stack.imgur.com/AaIAW.png # https://ffmpeg.org/ffmpeg-scaler.html#toc-Scaler-Options
declare -r  SCALE="scale=$RESOLUTION:force_original_aspect_ratio=increase:$ALGORITHM,setsar=sar=1,setdar=dar=$ASPECT"
declare -r  DEINTERLACE="yadif=send_frame:auto:all"
# FILTERS https://ffmpeg.org/ffmpeg-filters.html#Filtergraph-description
#         http://manpages.ubuntu.com/manpages/cosmic/man1/ffmpeg-filters.1.html
declare -r  SPEED="setpts=1.0*PTS" # Multiplier. (Higher = longer, Lower = shorter)

declare -r  VIDEO_FILTERS="-filter:v $SCALE,$SPEED,$DEINTERLACE" # https://ffmpeg.org/ffmpeg-filters.html#yadif-1

# VOLUME https://stackoverflow.com/questions/38085408/complex-audio-volume-changes-with-ffmpeg
#declare -r  VOLUME="volume=-3dB"                      # Audio volume level 0-256 (256 = normaled) (-100dB = "silence" logrithmic curving)
declare -r  FADE_IN="volume=enable='between(t,0,20)':volume='t/20.0':eval=frame"
declare -r  FADE_OUT="volume=enable='between(t,40,60)':volume='1-(t-40)/20.0':eval=frame"
declare -r  VOLUME="$FADE_IN,$FADE_OUT"                # Audio volume level 0-256 (256 = normaled) (-100dB = "silence" logrithmic curving)
# declare -r  AUDIO_FILTERS="-filter:a $VOLUME"          # Audio Filters
declare -r  FILTER= # -filter [filter]                 # Main filter
declare -r  FILTERS="$AUDIO_FILTERS $VIDEO_FILTERS"


echo ASPECT $ASPECT
echo SCALE $SCALE

time $FFMPEG \
  $SEEK      \
  $INPUT     \
  $PROFILE   \
  $BASE      \
  $SYNC      \
  $STAMP     \
  $STATS     \
  $REPORT    \
  $THREADS   \
  $FILTERS   \
  $CODECS    \
  $MAPS      \
  $QUICKTIME \
  $FREQUENCY \
  $BITRATE   \
  $FORMAT    \
$OUTPUT

### 2-PASS https://slhck.info/video/2017/03/01/rate-control.html#2-pass-average-bitrate-2-pass-abr
# ffmpeg -i <input> -pass 1 -f mp4 /dev/null
# ffmpeg -i <input> -pass 2 <output>.mp4
