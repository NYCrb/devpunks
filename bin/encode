#!/usr/bin/env bash

# Video Conversion for Cross Device with FFmpeg
# https://gist.github.com/jaydenseric/220c785d6289bcfd7366
#
#Social Media Video encodings
# - https://trac.ffmpeg.org/wiki/Encode/YouTube

# Best Youtube settings
# - https://support.google.com/youtube/answer/1722171?hl=en
# - https://superuser.com/questions/866798/what-ffmpeg-command-line-matches-the-one-youtube-uses

# RATE CONTROL - https://slhck.info/video/2017/03/01/rate-control.html
# To summarize, here’s what you should do, depending on your use case:

# - Archival — CRF that gives you the quality you want.
# - Streaming — Two-pass CRF or ABR with VBV-constained bitrate.
# - Live Streaming — One-pass CRF or ABR with VBV-constained bitrate, or CBR if you can waste bits.
# - Encoding for Devices — Two-pass ABR, typically.

# Video encoding guide
# https://trac.ffmpeg.org/wiki/Encode/H.264

# Send output stream to dev/null
# https://stackoverflow.com/questions/20323640/ffmpeg-deocde-without-producing-output-file#answer-20325676

# echo $1

time ffmpeg  \
  -threads 4 \
  -i $1      \
  -stats     \
  -f null    \
dev/null

#
# SEEKING https://trac.ffmpeg.org/wiki/Seeking
# *** SEEK BEFORE INPUT for cover image ***
#   -ss [start]     \ seek start time offset
#   -t [duration]   \ seek duration time (precedence over -to)
#   -to [end]       \ seek end time
#   -vsync 1        \ # Video sync https://www.cleancss.com/explain-command/ffmpeg/6658
#   -copyts         \ # Copy timestamp
#   -copytb         \ # Copy time base
#
# read PNG images with filename img001, img002, img003, etc..
# img can be changed to another prefix
# %03d can be changed to %04d for 0001, %05d for 00001 formats, etc...
# -i img%03d.png    \
#   -threads 4      \ # thread count
#   -report         \
#   -vn             \ # Disable video
#   -an             \ # Disable audio
#   -vol 256        \ # Audio volume level (0-256)
#   -pre preset     \
#   -i input.avi    \
#
# FILTERS https://ffmpeg.org/ffmpeg-filters.html#Filtergraph-description
#   -filter_threads 4         \
#   -filter_complex_threads 4 \
#   -vf                       \  # Video filter
#     scale=1920x1080         \ # Scale (use n:-2 to keep aspect ratio) https://trac.ffmpeg.org/wiki/Scaling
#    ,setdar=16:9             \ # Another way to set video resolution
#   -af audio filter          \ # Audio filter
#   -filter [filter]          \ # Main filter
#
# FORMAT
#   -g 12           \ # or -g 15 varies on YouTube's FPS.(The default, 12, works for 24-25 fps. For NTSC and 30 fps, select 15.* FFMPEG option: -g, Not sure what youtube's default FPS is if it is 24 or 30. I assume 24 since the default 12 would be half the frame rate and 15 if their fra
#   -f format       \ # force format (image2, )
#   -bf 2           \ # Youtube Consecutive B Frame (default 16)
#   -vbr 2          \ # Variable bit rate
#   -crf 23         \ # crf (constant rate factor) quality (51 worst, 0 lossless, 18-28 is sane, default 23)
#   -movflags +faststart \ # https://trac.ffmpeg.org/wiki/Encode/AAC#ProgressiveDownload
#   -b:a 128K       \ # audio bitrate (-ab)
#   -b:v 1M         \ # video bitrate (-b)
#   -minrate 1M     \
#   -maxrate 1M     \
#   -bufsize 2M     \
#   -tune stillimage \  # ** USED FOR IMAGES **
#   -shortest       \ # Possibly used for shortest audio track
#   -framerate 24   \ # ** USED FOR IMAGES **
#   -frames:v 1     \ # (-vframes) ** USED FOR IMAGES **
#   -r 24000/1001   \ # FPS (Frames Per Second) (Assume YouTube's default frame rate is 24.)
#   -profile:v high \ # High profile for YouTube)
#   -level 4.0      \ # Profile level
#   -ar 48000       \ # Audio sample rate (41000 or 48000 for YouTube)
#   -aspect 16:9    \ # Aspect Ratio (4:3, 16:9, 1.3333)
#   -pix_fmt yuv420p\ # Chroma subsampling: 4:2:0 Quicktime Pixel format https://trac.ffmpeg.org/wiki/Encode/H.264#Encodingfordumbplayers
#
# CODECS
#   -c:a aac        \ # codec (shorthand) (e.g. copy, etc.)
#   -c:v libx264    \ # codec (shorthand) (e.g. copy, etc.)
#   -acodec aac     \ # codec (longform)  (e.g. copy, etc.) Fraunhofer is best `-c:a libfdk_aac`
#   -vcodec libx264 \ # codec (longform)  (e.g. copy, etc.)
#   -coder 1        \ # (YouTube: By default CABAC is the entropy encoder used by x264.)
#
# output.avi

### 2-PASS https://slhck.info/video/2017/03/01/rate-control.html#2-pass-average-bitrate-2-pass-abr
# ffmpeg -i <input> -c:v libx264 -b:v 1M -pass 1 -f mp4 /dev/null
# ffmpeg -i <input> -c:v libx264 -b:v 1M -pass 2 <output>.mp4

###################################################################################

for i in *.$1
  do
    echo $i
  done
